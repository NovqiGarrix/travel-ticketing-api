openapi: 3.0.4

info:
  title: Travel Ticketing API
  description: An API for a travel agency ticketing system.
  license:
    name: MIT
  version: 'v1.0'

servers:
  - url: https://travel-ticketing-api.fly.dev
    description: Production server deploy in fly.io using Docker

components:
  headers:
    X-Rate-Limit-Limit:
      description: The number of allowed requests in the current period
      schema:
        type: integer
    X-Rate-Limit-Remaining:
      description: The number of remaining requests in the current period
      schema:
        type: integer
  responses:
    InternalServerError:
      description: Internal Server Error
      headers:
        X-Rate-Limit-Limit:
          $ref: '#/components/headers/X-Rate-Limit-Limit'
        X-Rate-Limit-Remaining:
          $ref: '#/components/headers/X-Rate-Limit-Remaining'
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
                default: 500
              message:
                type: string
                default: Internal Server Error occur. Please try again!
  schemas:
    400ResponseBody:
      description: 400 Response body schema
      type: object
      properties:
        code:
          type: integer
          default: 400
        errors:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
              message:
                type: string

    SeatStatusUpdate:
      type: object
      description: Payload for the 'seatUpdate' event.
      properties:
        seatId:
          type: string
          description: The unique identifier for the seat.
          example: 'A2'
        newStatus:
          type: string
          description: The new status of the seat.
          enum: [available, locked]
          example: 'locked'

    SeatSnapshot:
      type: object
      description: Payload for the initial 'snapshot' event.
      properties:
        scheduleId:
          type: string
          format: uuid
        available:
          type: array
          items:
            type: string
          example: ['A1', 'A2', 'B3']
        locked:
          type: array
          items:
            type: string
          example: ['C1']

    XenditPaymentSessionWebhook:
      type: object
      required:
        - event
        - data
      properties:
        event:
          type: string
          enum:
            - payment_session.completed
            - payment_session.expired
        data:
          type: object
          required:
            - id
            - reference_id
          properties:
            id:
              type: string
            reference_id:
              type: string

    CreatePaymentSessionRequest:
      type: object
      required:
        - ticketId
      properties:
        ticketId:
          type: string
          format: uuid
    XenditCreateSessionItem:
      type: object
      properties:
        reference_id:
          type: string
        name:
          type: string
        description:
          type: string
        type:
          type: string
          enum: [DIGITAL_PRODUCT, PHYSICAL_PRODUCT, DIGITAL_SERVICE, PHYSICAL_SERVICE, FEE]
        category:
          type: string
        net_unit_amount:
          type: number
        quantity:
          type: integer
          minimum: 1
        currency:
          type: string
    XenditCreateSessionResponse:
      type: object
      properties:
        payment_session_id:
          type: string
        created:
          type: string
          format: date-time
        updated:
          type: string
          format: date-time
        reference_id:
          type: string
        customer_id:
          type: string
        session_type:
          type: string
          enum: [SAVE, PAY]
        allow_save_payment_method:
          type: string
          enum: [DISABLED, OPTIONAL, FORCED]
          nullable: true
        currency:
          type: string
          enum: [IDR, PHP, VND, THB, SGD, MYR, USD]
        amount:
          type: number
          minimum: 0
        country:
          type: string
          enum: [ID, PH, VN, TH, SG, MY]
        mode:
          type: string
          enum: [PAYMENT_LINK, CARDS_SESSION_JS]
        capture_method:
          type: string
          enum: [AUTOMATIC, MANUAL]
          nullable: true
        channel_properties:
          type: object
          additionalProperties: true
          nullable: true
        allowed_payment_channels:
          type: array
          items:
            type: string
        expires_at:
          type: string
          format: date-time
        locale:
          type: string
        description:
          type: string
        success_return_url:
          type: string
          format: uri
        cancel_return_url:
          type: string
          format: uri
        items:
          type: array
          items:
            $ref: '#/components/schemas/XenditCreateSessionItem'
          nullable: true
        status:
          type: string
          enum: [ACTIVE, COMPLETED, EXPIRED, CANCELED]
        payment_link_url:
          type: string
          format: uri
          nullable: true
        payment_token_id:
          type: string
          nullable: true
        payment_id:
          type: string
          nullable: true
        payment_request_id:
          type: string
          nullable: true
        business_id:
          type: string

    UpdateTicketRequest:
      type: object
      properties:
        scheduleId:
          type: string
          format: uuid
        totalPassenger:
          type: integer
          minimum: 1
          maximum: 15
        orderer:
          type: object
          properties:
            name:
              type: string
            email:
              type: string
            noWa:
              type: string
              pattern: '\+?([ -]?\d+)+|\(\d+\)([ -]\d+)'
        seatIdentifier:
          type: string
          pattern: 'A([1-9]|1[0-5])'

    Ticket:
      type: object
      properties:
        id:
          type: string
          format: uuid
        scheduleId:
          type: string
          format: uuid
        totalPassenger:
          type: number
        orderer:
          type: object
          properties:
            name:
              type: string
            email:
              type: string
            noWa:
              type: string
        seatIdentifier:
          type: string

    DepartureOrDestination:
      type: object
      properties:
        id:
          type: string
          format: uuid
        tag:
          type: string
          description: The City
          example: BANDUNG
        label:
          type: string
          example: BUAH BATU

paths:
  /departures:
    get:
      description: Get all available departures
      tags:
        - Departures
      responses:
        '200':
          description: Success to receive all departures
          headers:
            X-Rate-Limit-Limit:
              $ref: '#/components/headers/X-Rate-Limit-Limit'
            X-Rate-Limit-Remaining:
              $ref: '#/components/headers/X-Rate-Limit-Remaining'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DepartureOrDestination'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /destinations:
    get:
      description: Get all available destinations
      tags:
        - Destinations
      responses:
        '200':
          description: Success to receive all destinations
          headers:
            X-Rate-Limit-Limit:
              $ref: '#/components/headers/X-Rate-Limit-Limit'
            X-Rate-Limit-Remaining:
              $ref: '#/components/headers/X-Rate-Limit-Remaining'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DepartureOrDestination'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /schedules:
    get:
      description: Check travel schedules for specific departure, destination, date, and amount of passenger
      tags:
        - Schedules
      parameters:
        - name: departureId
          in: query
          description: User's departure ID
          required: true
          schema:
            type: string
        - name: destinationId
          in: query
          description: User's destination ID
          required: true
          schema:
            type: string
        - name: departureDate
          in: query
          description: User's departure date in YYYY-MM-DD format
          required: true
          schema:
            type: string
        - name: totalPassenger
          in: query
          description: Total passenger
          required: true
          schema:
            type: number
      responses:
        '200':
          description: A successful response
          headers:
            X-Rate-Limit-Limit:
              $ref: '#/components/headers/X-Rate-Limit-Limit'
            X-Rate-Limit-Remaining:
              $ref: '#/components/headers/X-Rate-Limit-Remaining'
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          format: uuid
                        time:
                          type: string
                          format: timestamp
                        estimationTime:
                          type: integer
                          format: seconds
                        totalLockedSeat:
                          type: integer
                        departure:
                          $ref: '#/components/schemas/DepartureOrDestination'
                        destination:
                          $ref: '#/components/schemas/DepartureOrDestination'
                        price:
                          type: integer
                          format: IDR
        '400':
          description: One or more of the query parameter are invalid or missing. Check the response body for details
          headers:
            X-Rate-Limit-Limit:
              $ref: '#/components/headers/X-Rate-Limit-Limit'
            X-Rate-Limit-Remaining:
              $ref: '#/components/headers/X-Rate-Limit-Remaining'
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    default: 400
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        field:
                          type: string
                          description: One or more query parameters
                        message:
                          type: string
                          description: The error message
        '500':
          $ref: '#/components/responses/InternalServerError'

  /schedules/{scheduleId}/locked-seat:
    get:
      tags:
        - Schedules
      description: |
        Establishes a Server-Sent Events (SSE) connection to receive
        real-time updates on seat availability for a specific schedule.

        The client must accept the `text/event-stream` content type.
        The connection will remain open, and the server will push events
        as seat statuses change.
      parameters:
        - name: scheduleId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: A successful, continuous stream of seat availability events. The stream consists of different event types.
          content:
            text/event-stream:
              schema:
                type: string
                description: |
                  The event stream is a flow of data blocks. Each block has an `event` type
                  and a `data` payload (which is a JSON string).

                  **Event: `locked-seats`**
                  Fires *once* upon initial connection.
                  Provides the locked seats for the schedule.
                  The `data` payload is a JSON string of an array

                  **Event: `seat-locked`**
                  Fires whenever a single seat is locked. The `data` payload is a JSON string of an array

                  **Event: `seat-unlocked`**
                  Fires whenever a single seat is unlocked. The `data` payload is a JSON string of an array

                example: |
                  event: locked-seats
                  data: ["A1", "A2", "A3"]

                  event: seat-locked
                  data: ["A1"]

                  event: seat-unlocked
                  data: ["A1"]
        '400':
          description: Missing or invalid scheduleId
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400ResponseBody'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /tickets:
    post:
      tags:
        - Tickets
      description: Create an order
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                scheduleId:
                  type: string
                  format: uuid
                totalPassenger:
                  type: integer
                orderer:
                  type: object
                  properties:
                    name:
                      type: string
                    email:
                      type: string
                    noWa:
                      type: string
                      example: 628xxxxx
                seatIdentifier:
                  type: string
                  description: Not the Seat ID but the seat_identifier such as A1, C2, etc..
      responses:
        '201':
          description: Sucessfully create order. Seat is locked for 10 minutes and waiting for payment
          headers:
            X-Rate-Limit-Limit:
              $ref: '#/components/headers/X-Rate-Limit-Limit'
            X-Rate-Limit-Remaining:
              $ref: '#/components/headers/X-Rate-Limit-Remaining'
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    default: 201
                  data:
                    type: object
                    properties:
                      ticket:
                        type: object
                        properties:
                          id:
                            type: string
                            format: uuid
                          scheduleId:
                            type: string
                            format: uuid
                          totalPassenger:
                            type: number
                          orderer:
                            type: object
                            properties:
                              name:
                                type: string
                              email:
                                type: string
                              noWa:
                                type: string
                                example: 628xxxxx
                          seatIdentifier:
                            type: string
                      secondsBeforeInvalid:
                        type: integer
                      checkout:
                        type: object
                        properties:
                          id:
                            type: string
                          url:
                            type: string
                          status:
                            type: string
                            format: PENDING or PAID
                            default: PENDING
        '400':
          description: One or more of the request body are invalid or missing
          headers:
            X-Rate-Limit-Limit:
              $ref: '#/components/headers/X-Rate-Limit-Limit'
            X-Rate-Limit-Remaining:
              $ref: '#/components/headers/X-Rate-Limit-Remaining'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400ResponseBody'
        '404':
          description: Schedule data is not found
          headers:
            X-Rate-Limit-Limit:
              $ref: '#/components/headers/X-Rate-Limit-Limit'
            X-Rate-Limit-Remaining:
              $ref: '#/components/headers/X-Rate-Limit-Remaining'
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                  message:
                    type: string
                    example: Schedule data is not found or has been expired
        '500':
          $ref: '#/components/responses/InternalServerError'

  /tickets/{id}:
    patch:
      tags:
        - Tickets
      description: Update ticket details.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTicketRequest'
      responses:
        '200':
          description: Successfully updated ticket.
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 200
                  data:
                    $ref: '#/components/schemas/Ticket'
        '400':
          description: One or more request body fields are invalid or missing.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400ResponseBody'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /payments:
    post:
      tags:
        - Payments
      description: Initiate a payment session for a ticket.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePaymentSessionRequest'
      responses:
        '201':
          description: Payment session created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/XenditCreateSessionResponse'
        '400':
          description: Invalid request payload.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400ResponseBody'
        '404':
          description: Ticket not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 404
                  error:
                    type: string
                    example: 'Ticket with: <ticket_id> does not exist'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /payments/webhook:
    post:
      tags:
        - Payments
      description: Handle webhook callbacks from Xendit.
      parameters:
        - in: header
          name: X-CALLBACK-TOKEN
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/XenditPaymentSessionWebhook'
      responses:
        '200':
          description: Webhook processed successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    default: 200
        '403':
          description: Invalid webhook token.
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 403
                  error:
                    type: string
                    example: Invalid Webhook
        '500':
          $ref: '#/components/responses/InternalServerError'
